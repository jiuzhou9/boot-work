<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <properties resource="jdbc.properties"/>
    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="boot-work" defaultModelType="hierarchical" targetRuntime="MyBatis3">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖-->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!-- generate entity时，生成hashcode和equals方法 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <!-- generate entity时，生成serialVersionUID -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!--&lt;!&ndash; 这个插件只会增加字符串字段映射到一个JDBC字符的方法 &ndash;&gt;
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />-->
        <!-- genenat entity时,生成toString -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <commentGenerator>
            <property name="suppressAllComments" value="true"></property>
            <property name="suppressDate" value="false"></property>
        </commentGenerator>

        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${driverClassName}" connectionURL="${url}" userId="${username}" password="${password}" />
        <!--
            java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- java模型创建器，是必须要的元素
               负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
               targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
               targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
        -->
        <javaModelGenerator targetPackage="${modelPackage}" targetProject="src/main/java">
            <!--  for MyBatis3/MyBatis3Simple
                自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；
            -->
            <property name="constructorBased" value="false"/>
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
            <!-- for MyBatis3 / MyBatis3Simple
                是否创建一个不可变的类，如果为true，
                那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类
             -->
            <property name="immutable" value="false"/>
            <!--
                设置一个根对象，
                如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
                注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
                1，属性名相同，类型相同，有相同的getter/setter方法；
             -->
            <!--<property name="rootClass" value="com.yueyue.db.domain.BaseDomain"/>-->
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!-- 生成SQL map的XML文件生成器，
        注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
        targetPackage/targetProject:同javaModelGenerator
     -->
        <sqlMapGenerator targetPackage="${sqlMapperPackage}" targetProject="src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--
            对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="${mapperPackage}" targetProject="src/main/java" type="XMLMAPPER">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查
            <property name="rootInterface" value=""/>-->
        </javaClientGenerator>

        <!--<table tableName="resource">-->
            <!--<columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>-->
            <!--<columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>-->
        <!--</table>-->
        <table tableName="server">
            <columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>
            <columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>
        </table>
        <!--<table tableName="role" schema="public">-->
            <!--<columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>-->
            <!--<columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>-->
        <!--</table>-->
        <!--<table tableName="role_resource" schema="public">-->
            <!--<columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>-->
            <!--<columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>-->
        <!--</table>-->
        <!--<table tableName="user" schema="public">-->
            <!--<columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>-->
            <!--<columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>-->
        <!--</table>-->
        <!--<table tableName="user_role" schema="public">-->
            <!--<columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>-->
            <!--<columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>-->
        <!--</table>-->
        <!--<table tableName="user_app" schema="public">-->
            <!--<columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>-->
            <!--<columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>-->
        <!--</table>-->
        <!--<table tableName="app_role" schema="public">-->
            <!--<columnOverride column="create_time" javaType="java.time.LocalDateTime"></columnOverride>-->
            <!--<columnOverride column="update_time" javaType="java.time.LocalDateTime"></columnOverride>-->
        <!--</table>-->
    </context>
</generatorConfiguration>